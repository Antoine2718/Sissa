<?php
require_once("../common/db.php");
require_once("../common/utilisateur.php");
session_start();

// --- Connexion Ã  la base de donnÃ©es ---
// Ã€ adapter
// fonction connect() de db.php
$pdo = connect();
// --- SÃ©lection du mode de jeu ---
if (!isset($_SESSION['mode'])) {
    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_GET['mode_selection'])) {
        $_SESSION['mode'] = $_GET['mode_selection'];
        // On gÃ¨re la difficultÃ© uniquement pour le mode IA
        if ($_SESSION['mode'] === 'computer' && isset($_POST['difficulty'])) {
            $difficulty = intval($_POST['difficulty']);
            if ($difficulty < 1) { 
                $difficulty = 1;
            }
            if ($difficulty > 10) {
                $difficulty = 10; 
            }
            // Mettre difficulty dans Session et globals
            $_SESSION['difficulty'] = $difficulty;
            $GLOBALS['difficulty'] = $difficulty;
        } else {
            // Sinon, par defaut, algo optimal
            $_SESSION['difficulty'] = 10; // Valeur par dÃ©faut pour le mode 'human'
            $GLOBALS['difficulty'] = 10;
        }
        // Si l'utilisateur n'est pas connectÃ©
        if(!isConnected()){
            header("Location: ../pages/login.php");
            exit();
        }
        
    } else {
        // Affichage du formulaire de choix de mode
        ?>
        <!DOCTYPE html>
        <html lang="fr">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Sissa - Choix du mode</title>
            <link rel="stylesheet" href="jeu.css">
                <?php //Ajoute la barre de navigation
                include("../common/styles.php")
                ?>
        </head>
        <body>
        <?php //Ajoute la barre de navigation
            require_once("../common/db.php");
            include("../common/nav.php")
        ?>
        <div class="content">
            <div class="selection">
                <div class="selection-title">
                    <h2>Choisissez le mode de jeu</h2>
                </div>
                <div class ="selection-content">
                    <a class="color-button" href="jeu.php?mode_selection=computer">Jouer contre notre IA ðŸ§ </a>
                    <a class="color-button" href="jeu.php?mode_selection=human">Jouer contre un ami</a>
                </div>
                
            </div>
            
        <!-- Contenu principal -->
        
        <?php /* if ($_SESSION["mode_selection"] === "computer"): */ ?>
        <!-- Affichage de la liste des robots disponibles -->
        <?php
        // --- Si on joue en mode IA, on rÃ©cupÃ¨re tous les robots depuis la BDD ---
            try {
                $stmt = $pdo->query("SELECT idRobot, nomRobot, niveauRobot, lien_icone FROM robot");
                $robots = $stmt->fetchAll(PDO::FETCH_ASSOC);
            } catch (PDOException $e) {
                echo "Erreur lors de la rÃ©cupÃ©ration des robots : " . $e->getMessage();
                $robots = [];
            }
            $display ="none";
            if(isset($_GET)&&isset($_GET['mode_selection'])){
                if($_GET['mode_selection']=="computer"){
                    $display = 'block';
                }
            }
        ?>
        <form method="post">
            <div id="difficulty-container" <?php echo"style=\"display: $display;\";"?>>
                <label for="difficulty"> <h4> Niveau de difficultÃ© pour l'IA : </h4> </label>
                <div class="robots">
                    <h2>IA disponibles</h2>
                    <?php if (!empty($robots)): ?>
                        <ul>
                                
                            <table style="border: 0px; border-spacing: 10px; border-collapse: collapse; max-width : 80%; margin-left: auto, margin-right : auto;">
                            <tr>
                            <?php $i = 0; 
                            foreach ($robots as $robot): ?>
                                <th>
                                <img src="<?= $robot['lien_icone'] ?>" style="width:200px;height:200px; vertical-align: middle; border-radius: 40%; border: 1px solid lightgray;">
                                <br>
                                <h3> <?= $robot['nomRobot'] ?> </h3> Niveau : <?= $robot['niveauRobot'] ?>
                                <input id="difficulty" type="radio" name="difficulty" value="<?= $robot['niveauRobot'] ?>">
                                <br><br><br>
                                </th>
                                <?php 
                                $i += 1;
                                if($i % 5 == 0) : ?>
                                    </tr> <tr>
                                <?php endif; ?>
                            <?php endforeach; ?>
                            </tr>
                            </table>
                                
                        </ul>
                    <?php else: ?>
                        <p>Aucun robot disponible.</p>
                    <?php endif; ?>
                </div>
            <?php /* endif; */ ?>

            </div>
            <?php if (isset($_GET)&&isset($_GET['mode_selection'])) :?>
                <input type="submit" value="Commencer" class="color-button">
            <?php endif ?>
            <br>
            </div>
        </form>
            
        <?php
        include("../common/footer.php");
        ?>
            
        </body>
        </html>
        <?php
        exit();
    }
}
// --- RÃ©initialisation du jeu ---
if (isset($_POST['reset'])) {
    // unset tout ce qui doit l'Ãªtre (ont evite d'arreter la session
    unset($_SESSION['partie']);
    unset($_SESSION['board']);
    unset($_SESSION['difficulty']);
    unset($GLOBALS['difficulty']);
    unset($_SESSION['mode']);
    header('Location: ' . $_SERVER['PHP_SELF']);
    exit();
}

// --- Initialisation du plateau et des donnÃ©es de session ---
if (!isset($_SESSION['board'])) {
    $_SESSION['board'] = [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '];
    $_SESSION['current_player'] = 'X';
    $_SESSION['history_X'] = []; // Historique des coups du joueur X (humain)
    $_SESSION['history_O'] = []; // Historique des coups du joueur O (humain ou IA)
}

// --- Fonctions de gestion du jeu ---
// VÃ©rifie s'il y a un gagnant sur le plateau
function checkWinner($board) {
    $winning_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8], // Lignes
        [0, 3, 6], [1, 4, 7], [2, 5, 8], // Colonnes
        [0, 4, 8], [2, 4, 6]             // Diagonales
    ];
    
    foreach ($winning_combinations as $combination) {
        if ($board[$combination[0]] !== ' ' &&
            $board[$combination[0]] === $board[$combination[1]] &&
            $board[$combination[1]] === $board[$combination[2]]) {
            return $board[$combination[0]];
        }
    }
    return null;
}

// ImplÃ©mentation de l'algorithme Minimax
// 'O' est jouÃ© par l'ordinateur et 'X' par l'humain
/* 
Lorsqu'un joueur effectue un coup, cet acte gÃ©nÃ¨re un nouvel Ã©tat du 
jeu, entraÃ®nant une ramification dans l'arbre de dÃ©cision. Chaque nÅ“ud de cet 
arbre est Ã©valuÃ© en fonction de la stratÃ©gie gagnante du joueur courant, qui peut 
Ãªtre soit le joueur maximiseur, soit le joueur minimiseur.

Joueur Maximiseur : Cherche Ã  maximiser son score. Cela se produit lors du 
tour dâ€™un joueur qui cherche Ã  gagner.
Joueur Minimiseur : Cherche Ã  minimiser le score du joueur maximiseur. Cela se produit 
lors du tour de l'adversaire, qui essaie d'Ã©viter que le joueur maximiseur ne gagne.
Algorithme Minimax

L'algorithme Minimax fonctionne de maniÃ¨re rÃ©cursive comme suit :

Ã‰valuation des Positions Terminales : Ã€ chaque feuille de l'arbre (Ã©tat final du jeu), on 
calcule une valeur d'Ã©valuation. Cela peut Ãªtre :
+1 si le joueur maximiseur gagne.
-1 si le joueur minimiseur gagne.
0 si c'est une Ã©galitÃ©.
Propagation des Valeurs : Pour chaque nÅ“ud interne, on Ã©value le score en fonction du tour du joueur :
Si c'est le tour du joueur maximiseur, on prend le maximum des valeurs des nÅ“uds enfants.
Si c'est le tour du joueur minimiseur, on prend le minimum.
Ceci se traduit par les relations suivantes :
[
V(n) = \max { V(child_1), V(child_2), \ldots, V(child_k) } \quad \text{(pour le joueur maximiseur)}
]
[
V(n) = \min { V(child_1), V(child_2), \ldots, V(child_k) } \quad \text{(pour le joueur minimiseur)}
]
SÃ©lection du Meilleur Coup : Le processus sâ€™arrÃªte une fois que la recherche atteint une profondeur 
dÃ©terminÃ©e, ou un Ã©tat terminal. Le joueur choisit le coup correspondant au nÅ“ud avec la valeur 
dâ€™Ã©valuation optimale.
*/
function minimax($board, $depth, $is_maximizing) {
    $winner = checkWinner($board);
    if ($winner !== null) {
        if ($winner === 'O') {
            return 10 - $depth;
        } elseif ($winner === 'X') {
            return $depth - 10;
        }
    }
    if (!in_array(' ', $board)) {
        return 0;
    }
    
    if ($is_maximizing) {
        /* 0 de l'AlgÃ¨bre Max Plus*/
        $bestScore = -INF;
        for ($i = 0; $i < count($board); $i++) {
            if ($board[$i] === ' ') {
                $board[$i] = 'O';
                $score = minimax($board, $depth + 1, false);
                $board[$i] = ' ';
                $bestScore = max($score, $bestScore);
            }
        }
        return $bestScore;
    } else {
        /* 0 de l'AlgÃ¨bre Min Plus */
        $bestScore = INF;
        for ($i = 0; $i < count($board); $i++) {
            if ($board[$i] === ' ') {
                $board[$i] = 'X';
                $score = minimax($board, $depth + 1, true);
                $board[$i] = ' ';
                $bestScore = min($score, $bestScore);
            }
        }
        return $bestScore;
    }
}

// DÃ©termine le meilleur coup pour l'ordinateur
function best_move($board) {
    $bestScore = -INF;
    $move = -1;
    for ($i = 0; $i < count($board); $i++) {
        if ($board[$i] === ' ') {
            /* Si le coef de la matrice est null alors : */
            $board[$i] = 'O';
            $score = minimax($board, 0, false);
            $board[$i] = ' ';
            if ($score > $bestScore) {
                /* Si on trouve mieux que $bestScore, alors : */
                $bestScore = $score;
                $move = $i;
            }
        }
    }
    return $move;
}

require_once("../common/db.php");
// Fonction qui enregistre un coup dans la base de donnÃ©es
// Chaque coup est caractÃ©risÃ© par un code (ici, l'indice de la case) et un numÃ©ro de coup
function logMove($cell) {
    global $pdo;
    $moveNumber = count($_SESSION['history_X']) + count($_SESSION['history_O']);
    $stmt = $pdo->prepare("INSERT INTO coup (code_coup, numero_coup) VALUES (:code, :numero)");
    $stmt->execute([':code' => $cell, ':numero' => $moveNumber]);
    // Dernier ID inseret dans la base pour recuperer idcoup
    $idCoup = $pdo->lastInsertId();
    if(isset($_SESSION['partie'])){
        $idPartie = $_SESSION['partie'];
    }else{
        //crÃ©e une nouvelle partie 
        //insere dans la base de donnÃ©e
        $difficulty = $_SESSION['difficulty'];
        $player = getUser();
        global $pdo;
        $date = date('Y-m-d H:i:s');
        $char = 'X';
        $id = $player->getID();
        $stmt = $pdo->prepare("INSERT INTO partie (date_premier_coup, premier_joueur, idRobot, idUtilisateur) VALUES (:date_pc, :firs, :id1, :id2)");
        $stmt->execute([':date_pc' => $date, ':firs' => $char, ':id1' => $difficulty, ':id2' => $id]);
        $idPartie = $pdo->lastInsertId();
        $_SESSION['partie'] = $idPartie;
    }
    // $IDpartie et $IDmove a rÃ©cupÃ©rer
    $player = getUser();
    $date = date('Y-m-d H:i:s');
    $stmt = $pdo->prepare("INSERT INTO joue_coup (idPartie, idCoup, date_coup) VALUES (:idPartie, :idCoup, :date_coup)");
    $stmt->execute([':idPartie' => $idPartie, ':idCoup' => $idCoup, ':date_coup' => $date]);
    $state = Win();
    if($state['win']){
        //TODO afficher le rapport partie

    }
}

/*
// Gestion nouvelle partie
*/
// --- Gestion du coup jouÃ© par l'humain ---
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['cell'])) {
    $cell = intval($_POST['cell']);
    
    if ($_SESSION['board'][$cell] === ' ' && checkWinner($_SESSION['board']) === null) {
        $_SESSION['board'][$cell] = $_SESSION['current_player'];
        
        if ($_SESSION['current_player'] === 'X') {
            $_SESSION['history_X'][] = $cell;
        } else {
            $_SESSION['history_O'][] = $cell;
        }
        // Envoi du coup dans la BDD
        logMove($cell);
        $_SESSION['current_player'] = $_SESSION['current_player'] === 'X' ? 'O' : 'X';
    }
}

// VÃ©rification du gagnant aprÃ¨s le coup jouÃ© par l'humain
$winner = checkWinner($_SESSION['board']);
$available_moves = [];
foreach ($_SESSION['board'] as $i => $cell) {
    if ($cell === ' ') {
        $available_moves[] = $i;
    }
}
// --- Si le mode est ordinateur et c'est le tour de l'IA, jouer le coup de l'ordinateur ---
if ($_SESSION['mode'] === 'computer' && $_SESSION['current_player'] === 'O' && $winner == null && count($available_moves)!=0) {
    // RÃ©cupÃ¨re le niveau de difficultÃ© (1 = toujours alÃ©atoire, 10 = toujours minimax)
    $difficulty = isset($_SESSION['difficulty']) ? (int)$_SESSION['difficulty'] : 10;
    $GLOBALS['difficulty'] = $difficulty;
    // Calcul de la probabilitÃ© d'utiliser l'algorithme minimax :
    // Pour le niveau 1 --> (1-1)/9 = 0 (coup alÃ©atoire)
    // Pour le niveau 10 --> (10-1)/9 = 1 (coup optimisÃ©)
    // Pour la selection de l'IA, tout ce passe dans minimaxProbability
    $minimaxProbability = ($difficulty - 1) / 9;
    $rand = mt_rand(0, 100000) / 100000;
    
    if ($rand < $minimaxProbability) {
        $aiMove = best_move($_SESSION['board']);
    } else {
        // Choix alÃ©atoire parmi les coups disponibles
        
        $aiMove = $available_moves[array_rand($available_moves)];
    }
    logMove($aiMove);
    if ($aiMove !== -1 && $_SESSION['board'][$aiMove] === ' ') {
        $_SESSION['board'][$aiMove] = 'O';
        $_SESSION['history_O'][] = $aiMove;
        $_SESSION['current_player'] = 'X';
        $winner = checkWinner($_SESSION['board']);
    }
}
//TODO vÃ©rifie une victoire match null ou victoire bot ou victoire joueur
//Uniquement lorsque la partie est terminÃ©e on affiche nouvelle partie bouton

// Fonction Win pour comptage points
function Win() {
    $data = [];
    $winner = checkWinner($_SESSION['board']);
    $available_moves = [];
    foreach ($_SESSION['board'] as $i => $cell) {
        if ($cell === ' ') {
            $available_moves[] = $i;
        }
    }
    // ParitÃ© :
    /* 
    Cout restant pair = > IA perdu
    Cout restant impair = > IA gagnÃ©
    */
    if(count($available_moves)==0){
        $data['win'] = true;
        $data['draw'] = true;
    }else if($winner) {
        $data['win'] = True;
        if(count($available_moves) % 2 == 1) {
            $data['winner'] = 'IA';
            $data['IdWinner'] = $difficulty;
        } else {
            $player = getUser();
            $data['IdWinner'] = $player->getID();
        }
    } else {
        $data['win'] = False;
    }
    // Retouner : Bool gagnÃ© ou non, IA gagnÃ© ?, ID IA Gagnante sinon ID utilisateur
    return $data;
}

?>

<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sissa</title>
    <!--Ajoute les pages de styles-->
    <link rel="stylesheet" href="jeu.css">
    <?php //Ajoute la barre de navigation
        include("../common/styles.php")
    ?>
</head>
<body>
    <?php //Ajoute la barre de navigation
        require_once("../common/db.php");
        include("../common/nav.php");
    ?>
    <div class="container">
        <div class="board">
            <?php foreach ($_SESSION['board'] as $index => $value): ?>
                <div class="cell" onclick="document.getElementById('cellInput<?= $index ?>').submit();">
                    <?= $value ?>
                    <form id="cellInput<?= $index ?>" method="post" style="display: none;">
                        <input type="hidden" name="cell" value="<?= $index ?>">
                    </form>
                </div>
            <?php endforeach; ?>
        </div>
        <!-- Affichage du gagnant ou du match nul -->
        <?php if ($winner): ?>
            <h2 class="winner"><?= $winner ?> a gagnÃ© !</h2>
        <?php elseif (!in_array(' ', $_SESSION['board'])): 
            $winner = 'N';
            ?>
            <h2>Match nul !</h2>
        <?php endif; ?>

        <!-- Bouton de rÃ©initialisation 
        Uniquement en fin de partie -->
        <?php if ($winner OR $winner == 'N'): ?>
            <form method="post" class="reset-btn">
                <input type="submit" name="reset" value="Nouvelle partie" class="color-button"/>
            </form>
        <?php endif;?>
        <!-- Affichage de l'historique des coups -->
        <div class="history">
            <div>
                <h3>Joueur X</h3>
                <ul>
                    <?php foreach ($_SESSION['history_X'] as $move): ?>
                        <li>JouÃ© en <?= $move ?></li>
                    <?php endforeach; ?>
                </ul>
            </div>
            <div>
                <h3>Joueur O</h3>
                <ul>
                    <?php foreach ($_SESSION['history_O'] as $move): ?>
                        <li>JouÃ© en <?= $move ?></li>
                    <?php endforeach; ?>
                </ul>
            </div>
        </div>
    </div>
    </div>
    <?php
        include("../common/footer.php");
    ?>
</body>
</html>
